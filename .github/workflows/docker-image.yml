name: Docker Compose CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TS_AUTHKEY: ${{ secrets.TS_AUTHKEY }}
  APP_KEYS: ${{ secrets.APP_KEYS }}
  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
  DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
  DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_FILENAME: ${{ secrets.DATABASE_FILENAME }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}*
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Echo Path
      run: |
        echo "Current path: $PWD"

    - name: List files
      run: ls -la ./strapi-controle

        
    - name: Check if Docker Compose is installed
      id: check_docker_compose
      run: |
        if command -v docker-compose &> /dev/null; then
          echo "Docker Compose is already installed."
          echo "::set-output name=installed::true"
        else
          echo "Docker Compose is not installed."
          echo "::set-output name=installed::false"
        fi

    - name: Install Docker Compose
      if: steps.check_docker_compose.outputs.installed == 'false'
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose


    - name: Build and start containers
      run: |
        sudo docker-compose -f "docker-compose.yml" up -d

    - name: Check ts front
      run: docker container logs ts-frontend

    - name: Check ts back
      run: docker container logs ts-backend
    
